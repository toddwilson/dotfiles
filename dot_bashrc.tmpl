# Executed for interactive shells only
# Thanks: rwxrob

# Ensure shell is actually interactive
case $- in
*i*) ;; # is interactive
*) return ;;
esac


# -- local utility functions --------------------

_have() { type "$1" &>/dev/null; }
_source_if() { [[ -r "$1" ]] && source "$1"; }


# -- environment variables ----------------------

export LANG=en_US.UTF-8
export USER="${USER:-$(whoami)}"
export TZ=America/New_York


# -- shhh, secrets ------------------------------

export OPENAI_API_KEY="{{ .secrets.keys.openai }}"
export ANTHROPIC_API_KEY="{{ .secrets.keys.anthropic }}"

# -- path ---------------------------------------

pathappend() {
	declare arg
	for arg in "$@"; do
		test -d "$arg" || continue
		PATH=${PATH//":$arg:"/:}
		PATH=${PATH/#"$arg:"/}
		PATH=${PATH/%":$arg"/}
		export PATH="${PATH:+"$PATH:"}$arg"
	done
}

pathprepend() {
	for arg in "$@"; do
		test -d "$arg" || continue
		PATH=${PATH//:"$arg:"/:}
		PATH=${PATH/#"$arg:"/}
		PATH=${PATH/%":$arg"/}
		export PATH="$arg${PATH:+":${PATH}"}"
	done
}

# Export the function for compatibility with child shells
if [ -n "$BASH_VERSION" ]; then
    export -f pathappend
    export -f pathprepend
elif [ -n "$ZSH_VERSION" ]; then
    # Zsh-specific export
    typeset -f pathprepend >/dev/null
    typeset -f pathappend >/dev/null
fi

# last arg will be first in path
pathprepend \
  "$HOME/.local/bin" \
	"$HOME/.local/go/bin"

pathappend \
  "$HOME/.pub-cache/bin" # dart pub path


# -- shell & history options -------------------------------

export HISTCONTROL=ignoreboth # don't duplicate values and ignore ones with leading whitespace
export HISTSIZE=5000
export HISTFILESIZE=10000

if [ -n "$BASH_VERSION" ]; then
  shopt -s extglob # extended globbing patterns
  shopt -s histappend
elif [ -n "$ZSH_VERSION" ]; then
  setopt EXTENDED_GLOB
  setopt APPEND_HISTORY
fi

set -o vi


# -- aliases -------------------------------------

unalias -a
alias ..="cd .."
alias ls='ls -h --color=auto'
alias diff='diff --color'
alias more='less'
alias gitl='git log -n 5 --graph --decorate --oneline'
alias gp='git push'
alias gptags='git push origin --tags'



set-editor() {
	export EDITOR="$1"
	export VISUAL="$1"
	export GH_EDITOR="$1"
	export GIT_EDITOR="$1"
	alias vi="\$EDITOR"
}
_have "vim" && set-editor vi
_have "nvim" && set-editor nvim


# -- backup prompt for bash ----------------------

if [ -n "$BASH_VERSION" ]; then

  PROMPT_LONG=20
  PROMPT_MAX=95
  PROMPT_AT=@

  __ps1() {
    local P='$' dir="${PWD##*/}" B countme short long double \
      r='\[\e[31m\]' h='\[\e[34m\]' \
      u='\[\e[33m\]' p='\[\e[34m\]' w='\[\e[35m\]' \
      b='\[\e[36m\]' x='\[\e[0m\]' \
      g="\[\033[38;2;90;82;76m\]"

    [[ $EUID == 0 ]] && P='#' && u=$r && p=$u # root
    [[ $PWD = / ]] && dir=/
    [[ $PWD = "$HOME" ]] && dir='~'

    B=$(git branch --show-current 2>/dev/null)
    [[ $dir = "$B" ]] && B=.
    countme="$USER$PROMPT_AT$(hostname):$dir($B)\$ "

    [[ $B == master || $B == main ]] && b="$r"
    [[ -n "$B" ]] && B="$g($b$B$g)"

    short="$u\u$g$PROMPT_AT$h\h$g:$w$dir$B$p$P$x "
    long="${g}╔$u\u$g$PROMPT_AT$h\h$g:$w$dir$B\n${g}╚$p$P$x "
    double="${g}╔$u\u$g$PROMPT_AT$h\h$g:$w$dir\n${g}║$B\n${g}╚$p$P$x "

    if ((${#countme} > PROMPT_MAX)); then
      PS1="$double"
    elif ((${#countme} > PROMPT_LONG)); then
      PS1="$long"
    else
      PS1="$short"
    fi

    # if _have tmux && [[ -n "$TMUX" ]]; then
    # 	tmux rename-window "$(wd)"
    # fi
  }

  wd() {
    dir="${PWD##*/}"
    parent="${PWD%"/${dir}"}"
    parent="${parent##*/}"
    echo "$parent/$dir"
  } && export wd

  PROMPT_COMMAND="__ps1"

fi

